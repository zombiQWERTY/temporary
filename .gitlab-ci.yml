variables:
  GIT_DEPTH: 1

stages:
  - build
  - test
  - deploy

before_script:
  - docker network create erpmodul_network || true

.build-image:
  tags:
    - builder
  stage: build
  only:
    refs:
      - dev
      - main
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login "${CI_REGISTRY}" --username "${CI_REGISTRY_USER}" --password-stdin

    - |
      echo ${JWK} > ./infra/krakend/symmetric_jwk.json
      echo "${CONFIG}" | awk '{gsub(/","/, "\",\"")}1' | sed 's/ \+/\n/g' > ./.env && source ./.env

    - docker pull $CI_REGISTRY_IMAGE/krakend-${CI_COMMIT_REF_NAME}:latest || true
    - >
      docker build 
      --cache-from $CI_REGISTRY_IMAGE/krakend-${CI_COMMIT_REF_NAME}:latest
      -t "${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}" 
      -t "${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA:0:7}" 
      -t "${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:latest" 
      -f ./infra/prod/Dockerfile.krakend 
      --build-arg="ENV=prod"
      --build-arg="CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS"
      --build-arg="ALERT_SERVICE_HOST=$ALERT_APP_HOST:$SERVICE_REST_PORT"
      --build-arg="CORE_SERVICE_HOST=$CORE_APP_HOST:$SERVICE_REST_PORT"
      --build-arg="FILES_SERVICE_HOST=$FILES_APP_HOST:$SERVICE_REST_PORT"
      --build-arg="ACCOUNTS_SERVICE_HOST=$ACCOUNTS_APP_HOST:$SERVICE_REST_PORT"
      --build-arg="PRODUCTS_TM_SERVICE_HOST=$PRODUCTS_TM_APP_HOST:$SERVICE_REST_PORT"
      .

    - docker pull $CI_REGISTRY_IMAGE/base-${CI_COMMIT_REF_NAME}:latest || true
    - >
      docker build 
      --cache-from $CI_REGISTRY_IMAGE/base-${CI_COMMIT_REF_NAME}:latest 
      -t "${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}"
      -t "${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA:0:7}"
      -t "${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:latest"
      -f ./infra/prod/Dockerfile.base
      .

    - >
      docker build 
      -t "${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}" 
      -t "${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA:0:7}" 
      -t "${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:latest" 
      -f ./infra/prod/Dockerfile 
      --build-arg="BASE_IMAGE=${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}" 
      .

    - |
      docker push "${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}"
      docker push "${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA:0:7}"
      docker push "${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:latest"
      
      docker push "${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}"
      docker push "${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA:0:7}"
      docker push "${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:latest"
      
      docker push "${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG}"
      docker push "${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA:0:7}"
      docker push "${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:latest"

    - docker logout -- "${CI_REGISTRY}"

.run-tests:
  stage: test
  tags:
    - builder
  only:
    refs:
      - dev
      - main
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login "${CI_REGISTRY}" --username "${CI_REGISTRY_USER}" --password-stdin
    - docker run --rm ${CI_REGISTRY_IMAGE}/base-${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_SLUG} sh -c 'npm test'
    - docker logout -- "${CI_REGISTRY}"

.deploy-service:
  stage: deploy
  environment: prod
  only:
    refs:
      - main
  script:
    - mkdir -p ${PROJECT_DIRECTORY}/${SERVICE_NAME}
    - |
      echo "${CONFIG}" | awk '{gsub(/","/, "\",\"")}1' | sed 's/ \+/\n/g' > ./.env && source ./.env
      cp ./.env ${PROJECT_DIRECTORY}/${SERVICE_NAME}/.env
    - |
      cp ./docker-compose.prod.yml ${PROJECT_DIRECTORY}/${SERVICE_NAME}/docker-compose.yml
      sed -i "s#krakend_image#${CI_REGISTRY_IMAGE}/krakend-${CI_COMMIT_REF_NAME}:latest#g" ${PROJECT_DIRECTORY}/${SERVICE_NAME}/docker-compose.yml
      sed -i "s#app_image#${CI_REGISTRY_IMAGE}/app-${CI_COMMIT_REF_NAME}:latest#g" ${PROJECT_DIRECTORY}/${SERVICE_NAME}/docker-compose.yml
    - |
      echo "${CI_REGISTRY_PASSWORD}" | docker login "${CI_REGISTRY}" --username "${CI_REGISTRY_USER}" --password-stdin
      docker compose -f ${PROJECT_DIRECTORY}/${SERVICE_NAME}/docker-compose.yml pull
      docker compose -f ${PROJECT_DIRECTORY}/${SERVICE_NAME}/docker-compose.yml up -d
      docker logout -- "${CI_REGISTRY}"

build-stage:
  extends: .build-image
  environment: stage
  only:
    refs:
      - dev

build-demo:
  extends: .build-image
  environment: demo
  only:
    refs:
      - demo

build-prod:
  extends: .build-image
  environment: prod
  only:
    refs:
      - main

test-stage:
  extends: .run-tests
  environment:
    name: stage
  only:
    refs:
      - dev

test-demo:
  extends: .run-tests
  environment:
    name: demo
  only:
    refs:
      - demo

test-prod:
  extends: .run-tests
  environment:
    name: prod
  only:
    refs:
      - main

deploy-stage:
  extends: .deploy-service
  environment: stage
  tags:
    - erpmodul-stage
  only:
    refs:
      - dev

deploy-demo:
  extends: .deploy-service
  environment: demo
  tags:
    - erpmodul-demo
  only:
    refs:
      - demo

deploy-prod:
  extends: .deploy-service
  environment: prod
  tags:
    - erpmodul-prod
  only:
    refs:
      - main
