// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signal-service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FireEventRequest struct {
	IDs                  []uint32 `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	TenantID             string   `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	Event                string   `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Payload              string   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FireEventRequest) Reset()         { *m = FireEventRequest{} }
func (m *FireEventRequest) String() string { return proto.CompactTextString(m) }
func (*FireEventRequest) ProtoMessage()    {}
func (*FireEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_078f28007853e21c, []int{0}
}

func (m *FireEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FireEventRequest.Unmarshal(m, b)
}
func (m *FireEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FireEventRequest.Marshal(b, m, deterministic)
}
func (m *FireEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FireEventRequest.Merge(m, src)
}
func (m *FireEventRequest) XXX_Size() int {
	return xxx_messageInfo_FireEventRequest.Size(m)
}
func (m *FireEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FireEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FireEventRequest proto.InternalMessageInfo

func (m *FireEventRequest) GetIDs() []uint32 {
	if m != nil {
		return m.IDs
	}
	return nil
}

func (m *FireEventRequest) GetTenantID() string {
	if m != nil {
		return m.TenantID
	}
	return ""
}

func (m *FireEventRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *FireEventRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type FireEventResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FireEventResponse) Reset()         { *m = FireEventResponse{} }
func (m *FireEventResponse) String() string { return proto.CompactTextString(m) }
func (*FireEventResponse) ProtoMessage()    {}
func (*FireEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_078f28007853e21c, []int{1}
}

func (m *FireEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FireEventResponse.Unmarshal(m, b)
}
func (m *FireEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FireEventResponse.Marshal(b, m, deterministic)
}
func (m *FireEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FireEventResponse.Merge(m, src)
}
func (m *FireEventResponse) XXX_Size() int {
	return xxx_messageInfo_FireEventResponse.Size(m)
}
func (m *FireEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FireEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FireEventResponse proto.InternalMessageInfo

func (m *FireEventResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*FireEventRequest)(nil), "pb.FireEventRequest")
	proto.RegisterType((*FireEventResponse)(nil), "pb.FireEventResponse")
}

func init() { proto.RegisterFile("signal-service.proto", fileDescriptor_078f28007853e21c) }

var fileDescriptor_078f28007853e21c = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x4f, 0x6b, 0x85, 0x30,
	0x10, 0xc4, 0xeb, 0xb3, 0x7f, 0x9e, 0x0b, 0x82, 0x0d, 0x16, 0x82, 0x27, 0xf1, 0xe4, 0x45, 0x0f,
	0xed, 0xad, 0x67, 0x5b, 0x90, 0xde, 0xe2, 0x27, 0x88, 0x76, 0x29, 0x82, 0x24, 0xa9, 0x1b, 0x85,
	0x7e, 0xfb, 0x92, 0x88, 0xf2, 0xf0, 0x96, 0xdf, 0x64, 0x87, 0x99, 0x81, 0x94, 0xc6, 0x1f, 0x25,
	0xa7, 0x8a, 0x70, 0x5e, 0xc7, 0x01, 0x6b, 0x33, 0x6b, 0xab, 0xd9, 0xc5, 0xf4, 0x85, 0x81, 0xe4,
	0x73, 0x9c, 0xf1, 0x63, 0x45, 0x65, 0x05, 0xfe, 0x2e, 0x48, 0x96, 0x25, 0x10, 0xb6, 0x0d, 0xf1,
	0x20, 0x0f, 0xcb, 0x58, 0xb8, 0x27, 0xcb, 0xe0, 0x6a, 0x51, 0x49, 0x65, 0xdb, 0x86, 0x5f, 0xf2,
	0xa0, 0x8c, 0xc4, 0xc1, 0x2c, 0x85, 0x07, 0x74, 0x6e, 0x1e, 0xfa, 0x8f, 0x0d, 0x18, 0x87, 0x27,
	0x23, 0xff, 0x26, 0x2d, 0xbf, 0xf9, 0xbd, 0xd7, 0x77, 0x2c, 0x2a, 0x78, 0xbe, 0x49, 0x24, 0xa3,
	0x15, 0xa1, 0x3b, 0xa7, 0x65, 0x18, 0x90, 0x5c, 0x6c, 0x50, 0x5e, 0xc5, 0x8e, 0xaf, 0x5f, 0x10,
	0x77, 0xbe, 0x7c, 0xb7, 0x75, 0x67, 0xef, 0x10, 0x1d, 0x7e, 0x96, 0xd6, 0xa6, 0xaf, 0xcf, 0x03,
	0xb2, 0x97, 0x93, 0xba, 0x85, 0x14, 0x77, 0xfd, 0xa3, 0x1f, 0xfe, 0xf6, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xd9, 0xd1, 0xb7, 0x3c, 0x10, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignalServiceClient is the client API for SignalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignalServiceClient interface {
	FireEvent(ctx context.Context, in *FireEventRequest, opts ...grpc.CallOption) (*FireEventResponse, error)
}

type signalServiceClient struct {
	cc *grpc.ClientConn
}

func NewSignalServiceClient(cc *grpc.ClientConn) SignalServiceClient {
	return &signalServiceClient{cc}
}

func (c *signalServiceClient) FireEvent(ctx context.Context, in *FireEventRequest, opts ...grpc.CallOption) (*FireEventResponse, error) {
	out := new(FireEventResponse)
	err := c.cc.Invoke(ctx, "/pb.SignalService/FireEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalServiceServer is the server API for SignalService service.
type SignalServiceServer interface {
	FireEvent(context.Context, *FireEventRequest) (*FireEventResponse, error)
}

// UnimplementedSignalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSignalServiceServer struct {
}

func (*UnimplementedSignalServiceServer) FireEvent(ctx context.Context, req *FireEventRequest) (*FireEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireEvent not implemented")
}

func RegisterSignalServiceServer(s *grpc.Server, srv SignalServiceServer) {
	s.RegisterService(&_SignalService_serviceDesc, srv)
}

func _SignalService_FireEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServiceServer).FireEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SignalService/FireEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServiceServer).FireEvent(ctx, req.(*FireEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SignalService",
	HandlerType: (*SignalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireEvent",
			Handler:    _SignalService_FireEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signal-service.proto",
}
