name: erp-modul
services:
  erp-modul.postgres:
    container_name: erp-modul.postgres
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    command: ['postgres', '-c', 'log_statement=all']
    image: postgres:16-alpine
    logging:
      options:
        max-size: 10m
        max-file: '3'
    mem_limit: 1g
    cpus: 1.00
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - ./pg/data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - erpmodul_network

  erp-modul.krakend:
    container_name: erp-modul.krakend
    image: krakend_image
    command: [ "run", "-c", "krakend.json", ">/dev/null", "2>&1" ]
    networks:
      - erpmodul_network

  erp-modul.rabbitmq:
    image: rabbitmq:management-alpine
    container_name: erp-modul.rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_PASSWORD}
      - RABBITMQ_LOGS=-
      - RABBITMQ_DISK_FREE_LIMIT=2147483648
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
    networks:
      - erpmodul_network

  erp-modul.minio:
    container_name: erp-modul.minio
    image: minio/minio:RELEASE.2024-08-03T04-33-23Z
    restart: always
    command: [ "minio", "server", "--address", ":${MINIO_API_PORT}", "--console-address", ":9001", "/data" ]
    volumes:
      - ./minio/data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 9001:9001
      - "${MINIO_API_PORT}:9000"
    networks:
      - erpmodul_network

  erp-modul.core:
    image: app_image
    container_name: erp-modul.core
    entrypoint: /tmp/entrypoint.sh core
    env_file:
      - ./.env
    restart: unless-stopped
    depends_on:
      - erp-modul.postgres
    stdin_open: true
    tty: true
    networks:
      - erpmodul_network

  erp-modul.alert:
    image: app_image
    container_name: erp-modul.alert
    entrypoint: /tmp/entrypoint.sh alert
    env_file:
      - ./.env
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - erpmodul_network

  erp-modul.audit_log:
    image: app_image
    container_name: erp-modul.audit_log
    entrypoint: /tmp/entrypoint.sh audit_log
    env_file:
      - ./.env
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - erpmodul_network

  erp-modul.files:
    image: app_image
    container_name: erp-modul.files
    entrypoint: /tmp/entrypoint.sh files
    env_file:
      - ./.env
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - erpmodul_network

  erp-modul.accounts:
    image: app_image
    container_name: erp-modul.accounts
    entrypoint: /tmp/entrypoint.sh accounts
    env_file:
      - ./.env
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - erpmodul_network

  erp-modul.products_tm:
    image: app_image
    container_name: erp-modul.products_tm
    entrypoint: /tmp/entrypoint.sh products_tm
    env_file:
      - ./.env
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - erpmodul_network

  erp-modul.npm:
    image: 'jc21/nginx-proxy-manager:2.11.3'
    container_name: erp-modul.npm
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - './nginx-proxy-manager/data:/data'
      - './nginx-proxy-manager/letsencrypt:/etc/letsencrypt'
    networks:
      - erpmodul_network

networks:
  erpmodul_network:
    external: true
